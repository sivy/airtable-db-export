import pytest
import click
from click.testing import CliRunner
from airtable_db_export.main import cli, ensure_path


@pytest.mark.parametrize(
    "path,must_exist,parents_only,base_dir",
    [
        ("foo.json", False, False, ""),
        ("foo.json", True, False, "base"),
        ("foo.json", False, True, "base"),
        ("foo", True, True, "base"),
    ],
)
def test_ensure_path(tmp_path, path, must_exist, parents_only, base_dir):
    """ """
    test_path = tmp_path
    if base_dir:
        test_path /= base_dir
        base_dir = tmp_path / base_dir

    # breakpoint()
    test_path /= path

    if must_exist:
        # fail because it doesn't exist yet
        with pytest.raises(FileNotFoundError) as excinfo:
            ensure_path(test_path, True, parents_only, base_dir)
        if excinfo:
            return

    else:
        ensure_path(test_path, False, parents_only, base_dir)

    if parents_only:
        assert test_path.parent.exists()
        assert not test_path.exists()

    else:
        assert test_path.exists()
        test_path.unlink()


@cli.command("test-ctx")
@click.option("--key", default=None)
@click.option("--value", default=None)
@click.pass_context
def ctx_tester(ctx, key, value):
    """
    We only have result.output (generated by click)
    to test, so use click.echo to send the signal that a
    check passed.
    """
    if ctx.obj and isinstance(ctx.obj, dict):
        click.echo("Context OK")

    if key and value:
        if str(ctx.obj[key]) == value:
            click.echo(f"Context {key} == {value} OK")


def test_cli_help():
    runner = CliRunner()
    result = runner.invoke(cli)

    assert result.output.startswith("Usage")


@pytest.mark.parametrize(
    "option,value,var",
    [
        ("--base-dir", "option-value", "base_dir"),
        ("--data-dir", "option-value", "data_dir"),
        ("--sql-dir", "option-value", "sql_dir"),
        ("--schemas-file", "option-value", "schemas_file"),
        ("--db-file", "option-value", "db_file"),
    ],
)
def test_context_options(test_config_file, option, value, var):
    """ """
    runner = CliRunner()

    result = runner.invoke(
        cli,
        [
            "--config",
            test_config_file,
            option,
            value,
            "test-ctx",
            "--key",
            var,
            "--value",
            value,
        ],
    )
    assert "Context OK" in result.output
    assert f"Context {var} == {value} OK" in result.output
